from asyncio.tasks import sleep
from operator import truediv
import discord
from discord import message
from discord import embeds
from discord.audit_logs import _transform_verification_level
from discord.ext import commands
import random
from datetime import datetime
from discord.ext.commands import bot
from discord.webhook import WebhookAdapter



##########################################################################
            #TIC-TAC-TOE GAME

client = commands.Bot(command_prefix="$")  # "$" Is the prefix

@client.event
async def on_ready():
    print('RL United Bot is active.')
    await client.change_presence(activity=discord.Game('$commands'))
    
    print('Connected to bot: {}'.format(client.user.name))
    print('Bot ID: {}'.format(client.user.id))

client.remove_command('help')

player1 = ""
player2 = ""
turn = ""
gameOver = True

board = []

winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
]

@client.command()
async def tictactoe(ctx, p1: discord.Member, p2: discord.Member):
    global count
    global player1
    global player2
    global turn
    global gameOver

    if gameOver:
        global board
        board = [":white_large_square:", ":white_large_square:", ":white_large_square:",
                 ":white_large_square:", ":white_large_square:", ":white_large_square:",
                 ":white_large_square:", ":white_large_square:", ":white_large_square:"]
        turn = ""
        gameOver = False
        count = 0

        player1 = p1
        player2 = p2

        # print the board
        line = ""
        for x in range(len(board)):
            if x == 2 or x == 5 or x == 8:
                line += " " + board[x]
                await ctx.send(line)
                line = ""
            else:
                line += " " + board[x]

        # determine who goes first
        num = random.randint(1, 2)
        if num == 1:
            turn = player1
            await ctx.send("It is <@" + str(player1.id) + ">'s turn.")
        elif num == 2:
            turn = player2
            await ctx.send("It is <@" + str(player2.id) + ">'s turn.")
    else:
        await ctx.send("A game is already in progress! Finish it before starting a new one.")

@client.command()
async def place(ctx, pos: int):
    global turn
    global player1
    global player2
    global board
    global count
    global gameOver

    if not gameOver:
        mark = ""
        if turn == ctx.author:
            if turn == player1:
                mark = ":regional_indicator_x:"
            elif turn == player2:
                mark = ":o2:"
            if 0 < pos < 10 and board[pos - 1] == ":white_large_square:" :
                board[pos - 1] = mark
                count += 1

                # print the board
                line = ""
                for x in range(len(board)):
                    if x == 2 or x == 5 or x == 8:
                        line += " " + board[x]
                        await ctx.send(line)
                        line = ""
                    else:
                        line += " " + board[x]

                checkWinner(winningConditions, mark)
                print(count)
                if gameOver == True:
                    await ctx.send(mark + " wins!")
                elif count >= 9:
                    gameOver = True
                    await ctx.send("It's a tie!")

                # switch turns
                if turn == player1:
                    turn = player2
                elif turn == player2:
                    turn = player1
            else:
                await ctx.send("Be sure to choose an integer between 1 and 9 (inclusive) and an unmarked tile.")
        else:
            await ctx.send("It is not your turn.")
    else:
        await ctx.send("Please start a new game using the !tictactoe command.")


def checkWinner(winningConditions, mark):
    global gameOver
    for condition in winningConditions:
        if board[condition[0]] == mark and board[condition[1]] == mark and board[condition[2]] == mark:
            gameOver = True

@tictactoe.error
async def tictactoe_error(ctx, error):
    print(error)
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Please mention 2 players for this command.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("Please make sure to mention/ping players (ie. <@688534433879556134>).")

@place.error
async def place_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Please enter a position you would like to mark.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("Please make sure to enter an integer.")

######################################################################################################

                #Version Command

import asyncio
import datetime
from discord.ext import commands
async def display_date():
    loop = asyncio.get_running_loop()
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) >= end_time:
            break
        await asyncio.sleep(1)

@client.command()
async def version(ctx):
    emb=discord.Embed(title="RL Version 1.3", description=f"Version 1.4 Soon.")
    msg=await ctx.channel.send(embed=emb)

########################################################################################################

            #Commands List 

@client.command()
async def commands(ctx):
    await ctx.send ('**List of all commands**')
    await asyncio.sleep(.1)
    await ctx.send ('**$tictactoe @user @user** │ Plays a game of tictactoe, use command $place and numbers 1-9 to place a mark. Starts from top left to bottom right.')
    await asyncio.sleep(.1)
    await ctx.send ('**$version** │ Displays Current Bot Version.')
    await asyncio.sleep(.1)
    await ctx.send ('**$update** │ Displays all changes with current update.')
    await asyncio.sleep(.1)
    await ctx.send ('**$roll** │ Rolls a random number 1 - 1,000. Perfect for settling debates.')
    await asyncio.sleep(.1)
    await ctx.send ('**$server** │ Displays server information.')
    await asyncio.sleep(.1)
    await ctx.send ('**$id** │ Displays user ID in numbers (good for duplicate accounts) ')
    await asyncio.sleep(.1)
    await ctx.send ('**$poll (Message)** │ Creates a poll. ')
    await asyncio.sleep(.1)
    await ctx.send ('**$ban @user (Reason for ban)** │ Must have admin privilege on the server, $ban @user (Reason) DM will be sent to the user for the reason they were banned.')
    await asyncio.sleep(.1)
    await ctx.send ('**$kick @user (Reason for kick)** │ Must have admin privilege on the server, $kick @user (Reason) DM will be sent to the user for the reason they were kicked.')
    await asyncio.sleep(.1)
    await ctx.send ('**$banner** │ Sends the RL United Banner.')
    await asyncio.sleep(.1)
    await ctx.send ('**$ping** │ Sends bot latency.')
    await asyncio.sleep(.1)
    await ctx.send ('**$snipe** │ Sends last deleted message.')
    await asyncio.sleep(.1)
    await ctx.send ('**$clear (Amount to clear)** │ Clears messages must have admin privilege.')
    await asyncio.sleep(.1)
    await ctx.send ('**$timer (Seconds)** │ Sets a timer in seconds. Use the $multi command to multiply in variants of 60 seconds if you want it in minutes.')
    await asyncio.sleep(.1)
    await ctx.send ('**$add, $sub, $multi, $div** │ $add = addition, $sub = subtraction, $multi = multiplication, $div = division.         *Example. $add 1 2 ---- Bot will reply with 3*')
    await asyncio.sleep(.1)
    await ctx.send ('**$rip @user** │ R.I.P to that user.')
#########################################################################################################

            # ROLL COMMAND
from discord.ext import commands

@client.command()
async def roll(ctx):
    embed = discord.Embed(title = "Rolling 1 - 1,000", description = (random.randint(1, 1000)), color = (0x0000FF))
    embed.add_field(name="RL United.", value="vuxvo#9999", inline=False)

    embed.set_footer(text = "{}".format(ctx.author), icon_url=ctx.author.avatar_url)
    

    await ctx.send(embed = embed)
 ########################################################################################################

                #Server Command

@client.command()
async def server(ctx):
    name = str(ctx.guild.name)
    description = str(ctx.guild.description)

    owner = "vuxvo#9999"
    id = str(ctx.guild.id)
    region = str(ctx.guild.region)
    memberCount = str(ctx.guild.member_count)

    icon = str(ctx.guild.icon_url)

    embed = discord.Embed(
        title=name + " Server Information",
        description=description,
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=icon)
    embed.add_field(name="Owner", value=owner, inline=True)
    embed.add_field(name="Server ID", value=id, inline=True)
    embed.add_field(name="Region", value=region, inline=True)
    embed.add_field(name="Member Count", value=memberCount, inline=True)

    await ctx.send(embed=embed)
###########################################################################################################

            #User ID Command

@client.command(aliases=['user','info'])
@commands.has_permissions(kick_members=True)
async def id(ctx, member: discord.Member):
    embed = discord.Embed(title= member.name , description = member.mention , color = discord.Colour.red())
    embed.add_field(name = "ID", value = member.id, inline = True)
    await ctx.send (embed=embed)

###########################################################################################################

        #Ban Member Command

import datetime, time
from discord.ext import commands

@client.command()
@commands.has_permissions(ban_members = True)
async def ban(ctx, member :  discord.Member, *,reason=None):
    if member == None or member == ctx.message.author:
        await ctx.channel.send("You cannot ban yourself")
        return
    if reason == None:
        reason = "Unknown Reason!"
    message = f"You have been banned from {ctx.guild.name} for {reason}"
    await member.send(message)
    await member.ban(reason=reason)
    await ctx.send(f"{member} is banned!")

###########################################################################################################

                #Kick Member Command

@client.command()
@commands.has_permissions(kick_members = True)
async def kick(ctx, member :  discord.Member, *,reason=None):
    if member == None or member == ctx.message.author:
        await ctx.channel.send("You cannot kick yourself")
        return
    if reason == None:
        reason = "Unknown Reason!"
    message = f"You have been kicked from {ctx.guild.name} for {reason}"
    await member.send(message)
    await member.kick(reason=reason)
    await ctx.send(f"{member} is kicked!")

###########################################################################################################

                #Banner Command

@client.command()
async def banner(ctx):
    await ctx.send(file = discord.File('RLUnitedInvite.gif'))

    
############################################################################################################


            #Ping Command

@client.command()
async def ping(ctx):
    before = time.monotonic()
    message = await ctx.send("Latency!")
    ping = (time.monotonic() - before) * 1000
    await message.edit(content=f"Latency!  `{int(ping)}ms`")

#############################################################################################################

            #Snipe Command

bot.sniped_messages = {}

@client.event
async def on_message_delete(message):
    bot.sniped_messages[message.guild.id] = (message.content, message.author, message.channel.name, message.created_at)

@client.command()
async def snipe(ctx):
    try:
        contents, author, channel_name, time = bot.sniped_messages[ctx.guild.id]
        
    except:
        await ctx.channel.send("Couldn't find a message to snipe!")
        return

    embed = discord.Embed(description=contents, color=discord.Color.purple(), timestamp=time)
    embed.set_author(name=f"{author.name}#{author.discriminator}", icon_url=author.avatar_url)
    embed.set_footer(text=f"Deleted in : #{channel_name}")

    await ctx.channel.send(embed=embed)

##############################################################################################################

            # Clear Command

@client.command(name='clear', help='this command will clear msgs')
@commands.has_permissions(ban_members = True)
async def clear(ctx, amount = 5):
    await ctx.channel.purge(limit=amount)
    await asyncio.sleep(5)

###############################################################################################################

                #Timer Command In Seconds

@client.command()
async def timer(ctx, seconds):
    try:
        seconds= int(seconds)
    except ValueError:
        await ctx.send("Please provide a valid time")
        return
    await ctx.send(f"Your timer has started for {seconds} seconds.")
    await asyncio.sleep(seconds) # This is the sleep method.
    await ctx.send("Your timer ended!")
    return
    
################################################################################################################

                # Calculator Commands

@client.command() 
async def add(ctx,a:int,b:int): 
    await ctx.send(f"{a} + {b} = {a+b}") #Adds A and B

@client.command() 
async def sub(ctx,a:int,b:int): 
    await ctx.send(f"{a} - {b} = {a-b}") #Subtracts A and B

@client.command() 
async def multi(ctx,a:int,b:int): 
    await ctx.send(f"{a} * {b} = {a*b}") #Multplies A and B

@client.command() 
async def div(ctx,a:int,b:int): 
    await ctx.send(f"{a} / {b} = {a/b}") #Divides A and B

################################################################################################################

            # Rip Command With Image

from PIL import Image, ImageFilter
from io import BytesIO

@client.command()
async def rip(ctx,member:discord.Member=None):
    if not member:
        member = ctx.author

    rip = Image.open('rip.jpg')

    asset = member.avatar_url_as(size=128)
    data = BytesIO(await asset.read())
    pfp = Image.open(data)

    pfp = pfp.resize((270,270))

    rip.paste(pfp, (360,350))

    rip.save('prip.jpg')

    await ctx.send(file = discord.File('prip.jpg'))

################################################################################################################

            #Poll Command

@client.command()
@commands.has_permissions(kick_members = True)
async def poll(ctx,*,message):
    emb=discord.Embed(title="Poll", description=f"{message}")
    msg=await ctx.channel.send(embed=emb)
    await msg.add_reaction('✅')
    await msg.add_reaction('❌')

################################################################################################################

            # $Help to $Command 

@client.command()
async def help(ctx):
    await ctx.send ('**Use $commands**')

#################################################################################################################

        # Update

@client.command()
async def update(ctx):
    emb=discord.Embed(title="RL Version 1.3", description=f"Various Bug Fixes, $poll command added, $rip command added. $banner command fixed.")
    msg=await ctx.channel.send(embed=emb)

@client.command()
async def vux(ctx):
    emb=discord.Embed(title="vuxvo wins", description=f"he wins!.")
    msg=await ctx.channel.send(embed=emb)
    
client.run('I removed the token - Sumran Nasir')
